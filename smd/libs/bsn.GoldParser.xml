<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bsn.GoldParser</name>
    </assembly>
    <members>
        <member name="T:bsn.GoldParser.Grammar.CgtEntryType">
            <summary>
            Entry type byte in the binary grammar file.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.CgtRecordType">
            <summary>
            Record type byte in the binary grammar file.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.DfaCharset">
            <summary>
            A grammar charset representation
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.GrammarObject`1">
            <summary>
            The base class for the grammar objects <see cref="T:bsn.GoldParser.Grammar.DfaState"/>, <see cref="T:bsn.GoldParser.Grammar.LalrAction"/>, <see cref="T:bsn.GoldParser.Grammar.LalrState"/>, <see cref="T:bsn.GoldParser.Grammar.Rule"/> and <see cref="T:bsn.GoldParser.Grammar.Symbol"/>.
            </summary>
            <typeparam name="TSelf">The type of the grammar object implemented (self).</typeparam>
        </member>
        <member name="M:bsn.GoldParser.Grammar.GrammarObject`1.#ctor(bsn.GoldParser.Grammar.CompiledGrammar,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Grammar.GrammarObject`1"/> class.
            </summary>
            <param name="owner">The owner grammar.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:bsn.GoldParser.Grammar.GrammarObject`1.Index">
            <summary>
            Gets index of grammar object in the <see cref="T:bsn.GoldParser.Grammar.CompiledGrammar"/>.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.GrammarObject`1.Owner">
            <summary>
            Gets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.IToken">
            <summary>
            The common interface for all tokens, which carries the (grammar) symbol as well as their position in the input text.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Parser.IToken.NameIs(System.String)">
            <summary>
            Checks if the symbol name is the given name.
            </summary>
            <param name="name">The name to check.</param>
            <returns><c>true</c> if the name match, false otherwise</returns>
        </member>
        <member name="P:bsn.GoldParser.Parser.IToken.Position">
            <summary>
            Gets the line number where this token begins.
            </summary>
            <value>The line number and position.</value>
        </member>
        <member name="P:bsn.GoldParser.Parser.IToken.Symbol">
            <summary>
            Gets the symbol associated with this token.
            </summary>
            <value>The parent symbol.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.ITokenizer`1">
            <summary>
            A generic interface for tokenizers.
            </summary>
            <remarks>
            The <see cref="T:bsn.GoldParser.Parser.LalrProcessor`1"/> instances accept any tokenizer implementing this interface, but usually a tokenizer derived from the default implementation <see cref="T:bsn.GoldParser.Parser.Tokenizer`1"/> is used.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:bsn.GoldParser.Parser.ITokenizer`1.NextToken(`0@)">
            <summary>
            Tries to read and tokenize the next token.
            </summary>
            <param name="token">The new token.</param>
            <returns>A parsing result.</returns>
        </member>
        <member name="P:bsn.GoldParser.Parser.ITokenizer`1.Grammar">
            <summary>
            Gets the grammar used by the tokenizer.
            </summary>
            <value>The compiled grammar.</value>
        </member>
        <member name="T:bsn.GoldParser.Semantic.RuleAttribute">
            <summary>
            <para>Specifies the binding of a specific rule to a constructor (therefore implying the type to be constructed).</para>
            </summary>
            <example>
            <code><![CDATA[
            public class MyRule<T>: SemanticToken {
              [Rule("<X> ::= Y <X>)]
              public MyRule(MyTerminal y, MyRule x) { ... }
            } ]]></code>
            </example>
            <remarks>
            <para>You can apply this attribute to constructors only.</para>
            <para>The class which defines the constructor must inherit from the type used as generic type parameter of the <see cref="T:bsn.GoldParser.Semantic.SemanticTypeActions`1"/> and be located in the same assembly in order to be found and associated with the grammar rule.</para>
            <para>Use the <see cref="P:bsn.GoldParser.Semantic.RuleAttribute.ConstructorParameterMapping"/> to map rule handles arbitrarily to constructor parameters.</para>
            <para>If the class containing the constructor is generic, you can specify the generic type(s) to use following the rule string.</para>
            </remarks>
            <seealso cref="T:bsn.GoldParser.Semantic.TerminalAttribute"/>
            <seealso cref="T:bsn.GoldParser.Semantic.RuleTrimAttribute"/>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleAttribute.#ctor(System.String)">
            <summary>
            Define that the constructor where the attribute is applied shall be invoked for the given reduction rule.
            </summary>
            <param name="rule">The rule (in the same form as in the grammar file, such as <c> &lt;List&gt; ::= Item ',' &lt;List&gt;</c>).</param>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleAttribute.#ctor(System.String,System.Type)">
            <summary>
            Define that the constructor where the attribute is applied shall be invoked on the closed generic type for the given reduction rule.
            </summary>
            <param name="rule">The rule (in the same form as in the grammar file, such as <c>&lt;List&gt; ::= Item ',' &lt;List&gt;</c>).</param>
            <param name="genericTypeParameters">The type parameters to use for closing the generic type.</param>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleAttribute.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Define that the constructor where the attribute is applied shall be invoked on the closed generic type for the given reduction rule.
            </summary>
            <param name="rule">The rule (in the same form as in the grammar file, such as <c>&lt;List&gt; ::= Item ',' &lt;List&gt;</c>).</param>
            <param name="genericTypeParameters">The type parameters to use for closing the generic type.</param>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleAttribute.#ctor(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Define that the constructor where the attribute is applied shall be invoked on the closed generic type for the given reduction rule.
            </summary>
            <param name="rule">The rule (in the same form as in the grammar file, such as <c>&lt;List&gt; ::= Item ',' &lt;List&gt;</c>).</param>
            <param name="genericTypeParameters">The type parameters to use for closing the generic type.</param>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleAttribute.#ctor(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Define that the constructor where the attribute is applied shall be invoked on the closed generic type for the given reduction rule.
            </summary>
            <param name="rule">The rule (in the same form as in the grammar file, such as <c>&lt;List&gt; ::= Item ',' &lt;List&gt;</c>).</param>
            <param name="genericTypeParameters">The type parameters to use for closing the generic type.</param>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleAttribute.#ctor(System.String,System.Type[])">
            <summary>
            Define that the constructor where the attribute is applied shall be invoked on the closed generic type for the given reduction rule.
            </summary>
            <param name="rule">The rule (in the same form as in the grammar file, such as <c>&lt;List&gt; ::= Item ',' &lt;List&gt;</c>).</param>
            <param name="genericTypeParameters">The type parameters to use for closing the generic type.</param>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleAttribute.AllowTruncationForConstructor">
            <summary>
            Gets or sets a value indicating whether the list of symbols may be truncated when invoking the constructor.
            </summary>
            <remarks>
            <list type="bullet">
            <item>The same functionality can be achieved with an explicit <see cref="P:bsn.GoldParser.Semantic.RuleAttribute.ConstructorParameterMapping"/>.</item>
            <item>If a <see cref="P:bsn.GoldParser.Semantic.RuleAttribute.ConstructorParameterMapping"/> is defined, this property has no function.</item>
            </list>
            </remarks>
            <example>
            <para>Rule: <c>&lt;List&gt; ::= Item ';'</c></para>
            <para>Constructor: <c>MyList(MyItem item)</c></para>
            <para>Assuming that there is no explicit <see cref="P:bsn.GoldParser.Semantic.RuleAttribute.ConstructorParameterMapping"/> defined, <see cref="P:bsn.GoldParser.Semantic.RuleAttribute.AllowTruncationForConstructor"/> must be <c>true</c> to pass the consistency check in this example, since the <c>';'</c> symbol is to be truncated.</para>
            </example>
            <value>
            	<c>true</c> to allow truncation for the constructor, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleAttribute.ConstructorParameterMapping">
            <summary>
            Allows to define an explicit mapping of symbols to constructor parameters. The indices are 0-based.
            </summary>
            <value>An array with exacltly one integer index for each constructor parameter. The index must point to one of the symbols (0-based).</value>
            <example>
            Rule: <c>&lt;List&gt; ::= Item ',' &lt;List&gt;</c>
            Constructor: <c>MyList(MyList next, Item item)</c>
            Mapping: <c>new int[] {2, 0}</c>
            </example>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleAttribute.GenericTypeParameters">
            <summary>
            Gets the generic type parameters.
            </summary>
            <value>The generic type parameters.</value>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleAttribute.HasConstructorParameterMapping">
            <summary>
            Gets a value indicating whether this instance has a constructor parameter mapping.
            </summary>
            <value>
            	<c>true</c> if this instance has a constructor parameter mapping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleAttribute.IsGeneric">
            <summary>
            Gets a value indicating whether this instance is instantiating a generic type.
            </summary>
            <value>
            	<c>true</c> if this instance is instantiating a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:bsn.GoldParser.Semantic.RuleTrimAttribute">
            <summary>
            This attribute is used to define specific trim rules.
            </summary>
            <seealso cref="T:bsn.GoldParser.Semantic.TerminalAttribute"/>
            <seealso cref="T:bsn.GoldParser.Semantic.RuleAttribute"/>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleTrimAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Semantic.RuleTrimAttribute"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="trimSymbol">The trim symbol name.</param>
        </member>
        <member name="M:bsn.GoldParser.Semantic.RuleTrimAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Semantic.RuleTrimAttribute"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="trimSymbolIndex">Index of the trim symbol.</param>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleTrimAttribute.SemanticTokenType">
            <summary>
            Gets or sets the type of the semantic token for which the trim rule has been defined.
            </summary>
            <value>The type of the semantic token.</value>
        </member>
        <member name="P:bsn.GoldParser.Semantic.RuleTrimAttribute.TrimSymbolIndex">
            <summary>
            Gets the handle index of the trim symbol.
            </summary>
            <value>The handle index of the trim symbol.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.Tokenizer`1">
            <summary>
             The tokenizer reads an input character stream and outputs the tokens read.
            </summary>
             <remarks>
             A pull-model is used for the tokenizer.
             </remarks>
        </member>
        <member name="M:bsn.GoldParser.Parser.Tokenizer`1.#ctor(System.IO.TextReader,bsn.GoldParser.Grammar.CompiledGrammar)">
            <summary>
            Initializes new instance of Parser class.
            </summary>
            <param name="textReader"><see cref="P:bsn.GoldParser.Parser.Tokenizer`1.TextReader"/> instance to read data from.</param>
            <param name="grammar">The grammar used for the DFA states</param>
        </member>
        <member name="M:bsn.GoldParser.Parser.Tokenizer`1.NextToken(`0@)">
            <summary>
            Reads next token from the input stream.
            </summary>
            <returns>Token symbol which was read.</returns>
        </member>
        <member name="P:bsn.GoldParser.Parser.Tokenizer`1.InputIndex">
            <summary>
            Gets the index of the input.
            </summary>
            <value>The index of the input.</value>
        </member>
        <member name="P:bsn.GoldParser.Parser.Tokenizer`1.LineColumn">
            <summary>
            Gets current char position in the current source line. It is 1-based.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Parser.Tokenizer`1.LineNumber">
            <summary>
            Gets current line number. It is 1-based.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Parser.Tokenizer`1.MergeLexicalErrors">
            <summary>
            Gets or sets a value indicating whether lexical errors are merged (so that they contain more than one character).
            </summary>
            <value><c>true</c> if lexical errors are to be merged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:bsn.GoldParser.Parser.Tokenizer`1.TextReader">
            <summary>
            Gets source of parsed data.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Parser.Tokenizer`1.Grammar">
            <summary>
            Gets the grammar.
            </summary>
            <value>The grammar.</value>
        </member>
        <member name="T:bsn.GoldParser.Semantic.SemanticNonterminalFactory`2">
            <summary>
            The abstract generic case class for semantic nonterminal tokens. This class is usually not directly inherited.
            </summary>
            <typeparam name="TBase">The base type of the semantic token.</typeparam>
            <typeparam name="TOutput">The type of the nonterminal token.</typeparam>
        </member>
        <member name="T:bsn.GoldParser.Semantic.SemanticNonterminalFactory`1">
            <summary>
            The abstract nongeneric case class for semantic nonterminal tokens. This class is for internal use only.
            </summary>
            <typeparam name="TBase">The base type of the semantic token.</typeparam>
        </member>
        <member name="T:bsn.GoldParser.Semantic.SemanticTokenFactory`1">
            <summary>
            The abstract base class for all seamntic token factories.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Semantic.SemanticTokenFactory`1.IsStaticOutputType">
            <summary>
            Gets a value indicating whether the type created by this factory can vary or not. Typically, all factories but trim factories will return a static output type.
            </summary>
            <value>
            	<c>true</c> if this instance is static output type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:bsn.GoldParser.Semantic.SemanticTokenFactory`1.OutputType">
            <summary>
            Gets the type of the instances created by this factory.
            </summary>
            <value>The type of the output.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.LalrProcessor`1">
            <summary>
            Pull parser which uses Grammar table to parse input stream.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Parser.LalrProcessor`1.#ctor(bsn.GoldParser.Parser.ITokenizer{`0})">
            <summary>
            Initializes new instance of Parser class.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
            <param name="trim">if set to <c>true</c> [trim].</param>
        </member>
        <member name="M:bsn.GoldParser.Parser.LalrProcessor`1.GetExpectedTokens">
            <summary>
            Gets array of expected currentToken symbols.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Parser.LalrProcessor`1.Parse">
            <summary>
            Executes next step of parser and returns parser currentState.
            </summary>
            <returns>Parser current currentState.</returns>
        </member>
        <member name="P:bsn.GoldParser.Parser.LalrProcessor`1.CurrentToken">
            <summary>
            Gets the current currentToken.
            </summary>
            <value>The current currentToken.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.Tokenizer">
            <summary>
            A concrete tokenizer creating the normal <see cref="T:bsn.GoldParser.Parser.TextToken"/> as tokens.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Parser.Tokenizer.#ctor(System.IO.TextReader,bsn.GoldParser.Grammar.CompiledGrammar)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Parser.Tokenizer"/> class.
            </summary>
            <param name="textReader"><see cref="T:System.IO.TextReader"/> instance to read data from.</param>
            <param name="grammar">The grammar used for the DFA states</param>
        </member>
        <member name="T:bsn.GoldParser.Grammar.DfaState">
            <summary>
            State in the Deterministic Finite Automata 
            which is used by the tokenizer.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Grammar.DfaState.#ctor(bsn.GoldParser.Grammar.CompiledGrammar,System.Int32)">
            <summary>
            Creates a new instance of the <c>DfaState</c> class.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Grammar.DfaState.GetOriginStates">
            <summary>
            Gets the transition origin states.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.DfaState.GetTransition(System.Char)">
            <summary>
            Gets the transition for the given character.
            </summary>
            <param name="ch">The ch.</param>
            <returns>The transition or null if there is not transition defined.</returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.DfaState.GetTransitionStates">
            <summary>
            Gets the transition destination states.
            </summary>
            <returns></returns>
        </member>
        <member name="P:bsn.GoldParser.Grammar.DfaState.AcceptSymbol">
            <summary>
            Gets the symbol which can be accepted in this DFA state.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.CompiledGrammar">
            <summary>
            Contains grammar tables required for parsing.
            </summary>
            <remarks>The code is inspired by the GOLD C# engine by Vladimir Morozov (vmoroz@hotmail.com)</remarks>
        </member>
        <member name="F:bsn.GoldParser.Grammar.CompiledGrammar.FileHeader">
            <summary>
            Identifies Gold parser grammar file.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.Load(System.IO.Stream)">
            <summary>
            Loads the CompiledGrammar from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.Load(System.IO.BinaryReader)">
            <summary>
            Loads the CompiledGrammar from the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.Load(System.Type,System.String)">
            <summary>
            Loads the CompiledGrammar from the specified manifest resource of the <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <seealso cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)"/>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new instance of <c>CompiledGrammar</c> class
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetDfaCharset(System.Int32)">
            <summary>
            Gets the dfa charset.
            </summary>
            <param name="charSetIndex">Index of the char set.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetDfaState(System.Int32)">
            <summary>
            Gets the state of the dfa.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetLalrState(System.Int32)">
            <summary>
            Gets the state of the lalr.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetRule(System.Int32)">
            <summary>
            Gets the rule.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetRulesForSymbol(bsn.GoldParser.Grammar.Symbol)">
            <summary>
            Gets the rules for a nonterminal symbol.
            </summary>
            <param name="symbol">The nonterminal symbol.</param>
            <returns>A collection of associated rules.</returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetSymbol(System.Int32)">
            <summary>
            Gets the symbol.
            </summary>
            <param name="symbolIndex">Index of the symbol.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetSymbolByName(System.String)">
            <summary>
            Gets the symbol with the specified name.
            </summary>
            <param name="symbolName">Name of the symbol (including <c>&lt; &gt;</c> for non-terminals) .</param>
            <returns>The matching symbol.</returns>
            <exception cref="T:System.ArgumentException">The symbol name was not found.</exception>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.TryGetRulesForSymbol(bsn.GoldParser.Grammar.Symbol,System.Collections.ObjectModel.ReadOnlyCollection{bsn.GoldParser.Grammar.Rule}@)">
            <summary>
            Tries the get rules for symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rules">The rules.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.TryGetSymbol(System.String,bsn.GoldParser.Grammar.Symbol@)">
            <summary>
            Tries the get symbol.
            </summary>
            <param name="symbolName">Name of the symbol.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.GetStateOrigins(bsn.GoldParser.Grammar.DfaState)">
            <summary>
            Gets the state transition origin states.
            </summary>
            <param name="state">The state to get the transitions origin vectors for.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.Load(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Loads grammar from the binary reader.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadRangeCharsets(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read char set information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadCharsets(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read char set information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadDfaStates(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read DFA state information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadHeader(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Reads grammar header information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadInitialStates(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read initial DFA and LR states.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadLRStates(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read LR state information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadPackedCharsets(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read char set information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadRules(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read rule information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadSymbols(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Read symbol information.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.CompiledGrammar.ReadTableCounts(bsn.GoldParser.Grammar.CompiledGrammar.LoadContext)">
            <summary>
            Reads table record counts and initializes tables.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.About">
            <summary>
            Gets grammar description.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.Author">
            <summary>
            Gets grammar author.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.CaseSensitive">
            <summary>
            Gets the value indicating if the grammar is case sensitive.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.DfaCharsetCount">
            <summary>
            Gets the dfa charset count.
            </summary>
            <value>The dfa charset count.</value>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.DfaInitialState">
            <summary>
            Gets initial DFA state.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.DfaStateCount">
            <summary>
            Gets the dfa state count.
            </summary>
            <value>The dfa state count.</value>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.EndSymbol">
            <summary>
            Gets a special symbol to designate last token in the input stream.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.ErrorSymbol">
            <summary>
            Gets the error symbol.
            </summary>
            <value>The error symbol.</value>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.InitialLRState">
            <summary>
            Gets initial LR state.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.LalrStateCount">
            <summary>
            Gets the lalr state count.
            </summary>
            <value>The lalr state count.</value>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.Name">
            <summary>
            Gets grammar name.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.RuleCount">
            <summary>
            Gets the rule count.
            </summary>
            <value>The rule count.</value>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.StartSymbol">
            <summary>
            Gets the start symbol for the grammar.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.SymbolCount">
            <summary>
            Gets the symbol count.
            </summary>
            <value>The symbol count.</value>
        </member>
        <member name="P:bsn.GoldParser.Grammar.CompiledGrammar.Version">
            <summary>
            Gets grammar version.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.CompiledGrammar.DfaEdge">
            <summary>
            Edge between DFA states.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.LalrAction">
            <summary>
            Action in a LR State. 
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Grammar.LalrAction.#ctor(System.Int32,bsn.GoldParser.Grammar.Symbol)">
            <summary>
            Creats a new instance of the <c>LalrAction</c> class.
            </summary>
            <param name="index">Index of the LR state action.</param>
            <param name="symbol">Symbol associated with the action.</param>
        </member>
        <member name="P:bsn.GoldParser.Grammar.LalrAction.ActionType">
            <summary>
            Gets action type.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.LalrAction.Symbol">
            <summary>
            Gets symbol associated with the LR state action.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.LalrActionType">
            <summary>
            LR parser action type.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.LalrActionType.None">
            <summary>
            No action. Not used.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.LalrActionType.Shift">
            <summary>
            Shift a symbol and go to a state
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.LalrActionType.Reduce">
            <summary>
            Reduce by a specified rule
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.LalrActionType.Goto">
            <summary>
            Goto to a state on reduction
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.LalrActionType.Accept">
            <summary>
            Input successfully parsed
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.LalrActionType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.LalrState">
            <summary>
            State of LR parser.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Grammar.LalrState.#ctor(bsn.GoldParser.Grammar.CompiledGrammar,System.Int32)">
            <summary>
            Creates a new instance of the <c>LalrState</c> class
            </summary>
            <param name="index">Index of the LR state in the LR state table.</param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.LalrState.GetAction(System.Int32)">
            <summary>
            Returns state action by its index.
            </summary>
            <param name="index">State action index.</param>
            <returns>LR state action for the given index.</returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.LalrState.GetActionBySymbol(bsn.GoldParser.Grammar.Symbol)">
            <summary>
            Returns LR state action by symbol index.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>LR state action object.</returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.LalrState.Initialize(bsn.GoldParser.Grammar.LalrAction[],bsn.GoldParser.Grammar.LalrAction[])">
            <summary>
            Initializes the specified actions.
            </summary>
            <param name="actions">List of all available LR actions in this state.</param>
            <param name="transitionVector">Transition vector which has symbol index as an index.</param>
        </member>
        <member name="P:bsn.GoldParser.Grammar.LalrState.ActionCount">
            <summary>
            Gets LR state action count.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.ParseMessage">
            <summary>
            Available parse messages.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.TokenRead">
            <summary>
            Each time a token is read, this message is generated.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.Reduction">
            <summary>
            When the engine is able to reduce a rule,
            this message is returned. The rule that was
            reduced is set in the GOLDParser's ReduceRule property.
            The tokens that are reduced and correspond the
            rule's definition are stored in the Tokens() property.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.Accept">
            <summary>
            The engine will returns this message when the source
            text has been accepted as both complete and correct.
            In other words, the source text was successfully analyzed.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.LexicalError">
            <summary>
            The tokenizer will generate this message when
            it is unable to recognize a series of characters
            as a valid token. To recover, pop the invalid
            token from the input queue.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.SyntaxError">
            <summary>
            Often the parser will read a token that is not expected
            in the grammar. When this happens, the Tokens() property
            is filled with tokens the parsing engine expected to read.
            To recover: push one of the expected tokens on the input queue.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.CommentError">
            <summary>
            The parser reached the end of the file while reading a comment.
            This is caused when the source text contains a "run-away"
            comment, or in other words, a block comment that lacks the
            delimiter.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.InternalError">
            <summary>
            Something is wrong, very wrong.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.CommentBlockRead">
            <summary>
            A block comment is complete.
            When this message is returned, the content of the CurrentComment
            property is set to the comment text. The text includes starting and ending
            block comment characters.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.ParseMessage.CommentLineRead">
            <summary>
            Line comment is read.
            When this message is returned, the content of the CurrentComment
            property is set to the comment text. The text includes starting 
            line comment characters.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Parser.LalrProcessor">
            <summary>
             A concrete implementation of the <see cref="T:bsn.GoldParser.Parser.LalrProcessor`1"/> using <see cref="T:bsn.GoldParser.Parser.Token"/> as token types
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Parser.LalrProcessor.#ctor(bsn.GoldParser.Parser.ITokenizer{bsn.GoldParser.Parser.Token})">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Parser.LalrProcessor"/> class.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
        </member>
        <member name="M:bsn.GoldParser.Parser.LalrProcessor.#ctor(bsn.GoldParser.Parser.ITokenizer{bsn.GoldParser.Parser.Token},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Parser.LalrProcessor"/> class.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
            <param name="trim">Trim the rules withn only one nonterminal away if set to <c>true</c>.</param>
        </member>
        <member name="M:bsn.GoldParser.Parser.LalrProcessor.CreateReduction(bsn.GoldParser.Grammar.Rule,System.Collections.Generic.IList{bsn.GoldParser.Parser.Token})">
            <summary>
            Creates the reduction.
            </summary>
            <param name="rule">The rule.</param>
            <param name="children">The children.</param>
            <returns></returns>
        </member>
        <member name="P:bsn.GoldParser.Parser.LalrProcessor.Trim">
            <summary>
            Gets a value indicating whether this <see cref="T:bsn.GoldParser.Parser.LalrProcessor"/> does automatically trim the tokens with a single terminal.
            </summary>
            <value><c>true</c> if automatic trimming is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.LineInfo">
            <summary>
            A structure holding information about the text position of a specific token.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Parser.LineInfo.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Parser.LineInfo"/> struct.
            </summary>
            <param name="index">The character index.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
        </member>
        <member name="P:bsn.GoldParser.Parser.LineInfo.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:bsn.GoldParser.Parser.LineInfo.Index">
            <summary>
            Gets the character index.
            </summary>
            <value>The character index.</value>
        </member>
        <member name="P:bsn.GoldParser.Parser.LineInfo.Line">
            <summary>
            Gets the line.
            </summary>
            <value>The line.</value>
        </member>
        <member name="T:bsn.GoldParser.Parser.Reduction">
            <summary>
            A reduction token, which contains the child tokens reduced with the <see cref="!:ParentRule"/>.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Parser.Token">
            <summary>
            The <c>Token</c> class is the non-generic base class for tokens in the AST (abstract syntax tree).
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Parser.Token.Symbol">
            <summary>
            Gets the symbol associated with this token.
            </summary>
            <value>The parent symbol.</value>
        </member>
        <member name="P:bsn.GoldParser.Parser.Token.Position">
            <summary>
            Gets the line number where this token begins.
            </summary>
            <value>The line number and position.</value>
        </member>
        <member name="T:bsn.GoldParser.Grammar.Rule">
            <summary>
            Rule is the logical structures of the grammar.
            </summary>
            <remarks>
            Rules consist of a ruleSymbol containing a nonterminal 
            followed by a series of both nonterminals and terminals.
            </remarks>	
        </member>
        <member name="M:bsn.GoldParser.Grammar.Rule.#ctor(bsn.GoldParser.Grammar.CompiledGrammar,System.Int32)">
            <summary>
            Creates a new instance of <c>Rule</c> class.
            </summary>
            <param name="index">Index of the rule in the grammar rule table.</param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.Rule.Matches(System.Collections.Generic.ICollection{bsn.GoldParser.Grammar.Symbol})">
            <summary>
            Checks if the symbols in this rule match the given symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.Rule.ToString">
            <summary>
            Returns the Backus-Naur representation of the rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bsn.GoldParser.Grammar.Rule.Initialize(bsn.GoldParser.Grammar.Symbol,bsn.GoldParser.Grammar.Symbol[])">
            <summary>
            Initializes the specified ruleSymbol.
            </summary>
            <param name="head">Nonterminal of the rule.</param>
            <param name="symbols">Terminal and nonterminal symbols of the rule.</param>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Rule.Item(System.Int32)">
            <summary>
            Gets symbol by its index.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Rule.ContainsOneNonterminal">
            <summary>
            Gets true if the rule contains exactly one symbol.
            </summary>
            <remarks>Used by the Parser object to TrimReductions</remarks>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Rule.Definition">
            <summary>
            Gets the rule definition.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Rule.Name">
            <summary>
            Gets name of the rule.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Rule.RuleSymbol">
            <summary>
            Gets the ruleSymbol symbol of the rule.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Rule.SymbolCount">
            <summary>
            Gets number of symbols.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.Symbol">
            <summary>
            Represents a terminal or nonterminal symbol used by the Deterministic
            Finite Automata (DFA) and LR Parser. 
            </summary>
            <remarks>
            Symbols can be either terminals (which represent a class of 
            tokens - such as identifiers) or nonterminals (which represent 
            the rules and structures of the grammar).  Terminal symbols fall 
            into several categories for use by the GOLD Parser Engine 
            which are enumerated in <c>SymbolKind</c> enumeration.
            </remarks>
        </member>
        <member name="M:bsn.GoldParser.Grammar.Symbol.#ctor(bsn.GoldParser.Grammar.CompiledGrammar,System.Int32,System.String,bsn.GoldParser.Grammar.SymbolKind)">
            <summary>
            Creates a new instance of <c>Symbol</c> class.
            </summary>
            <param name="index">Symbol index in symbol table.</param>
            <param name="name">Name of the symbol.</param>
            <param name="kind">Type of the symbol.</param>
        </member>
        <member name="M:bsn.GoldParser.Grammar.Symbol.ToString">
            <summary>
            Returns the text representation of the symbol.
            In the case of nonterminals, the name is delimited by angle brackets,
            special terminals are delimited by parenthesis
            and terminals are delimited by single quotes 
            (if special characters are present).
            </summary>
            <returns>String representation of symbol.</returns>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Symbol.Kind">
            <summary>
            Returns an enumerated data type that denotes
            the class of symbols that the object belongs to.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Symbol.Name">
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Grammar.Symbol.XmlName">
            <summary>
             Gat the symbol name usable as XML name
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.SymbolKind">
            <summary>
            Type of symbol.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.Nonterminal">
            <summary>
            Normal nonterminal
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.Terminal">
            <summary>
            Normal terminal
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.WhiteSpace">
            <summary>
            This Whitespace symbols is a special terminal
            that is automatically ignored the the parsing engine.
            Any text accepted as whitespace is considered
            to be inconsequential and "meaningless".
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.End">
            <summary>
            The End symbol is generated when the tokenizer
            reaches the end of the source text.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.CommentStart">
            <summary>
            This type of symbol designates the start of a block quote.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.CommentEnd">
            <summary>
            This type of symbol designates the end of a block quote.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.CommentLine">
            <summary>
            When the engine reads a token that is recognized as
            a line comment, the remaining characters on the line
            are automatically ignored by the parser.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Grammar.SymbolKind.Error">
            <summary>
            The Error symbol is a general-purpose means
            of representing characters that were not recognized
            by the tokenizer. In other words, when the tokenizer
            reads a series of characters that is not accepted
            by the DFA engine, a token of this type is created.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Parser.TextToken">
            <summary>
            Represents data about current token.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Parser.TokenParseResult">
            <summary>
            Result of parsing token.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Semantic.SemanticTerminalTypeFactory`2">
            <summary>
            The factory for terminals of the semantic token type implementation.
            </summary>
            <typeparam name="TBase">The base type of the semantic token.</typeparam>
            <typeparam name="TOutput">The <see cref="T:bsn.GoldParser.Semantic.SemanticToken"/> descendant instantiated by this factory.</typeparam>
        </member>
        <member name="T:bsn.GoldParser.Semantic.SemanticTerminalFactory`2">
            <summary>
            The abstract generic case class for semantic terminal tokens. This class is usually not directly inherited.
            </summary>
            <typeparam name="TBase">The base type of the semantic token.</typeparam>
            <typeparam name="TOutput">The type of the terminal token.</typeparam>
        </member>
        <member name="T:bsn.GoldParser.Semantic.SemanticTerminalFactory`1">
            <summary>
            The abstract nongeneric case class for semantic terminal tokens. This class is for internal use only.
            </summary>
            <typeparam name="TBase">The base type of the semantic token.</typeparam>
        </member>
        <member name="M:bsn.GoldParser.Semantic.SemanticTerminalTypeFactory`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Semantic.SemanticTerminalTypeFactory`2"/> class. This is mainly for internal use.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Grammar.SymbolSet">
            <summary>
            A set class for symbols.
            </summary>
            <remarks>
            This class is being used because there is no <c>HashSet&lt;&gt;</c> class in the version 2 of the framework.
            </remarks>
        </member>
        <member name="M:bsn.GoldParser.Grammar.SymbolSet.Set(bsn.GoldParser.Grammar.Symbol)">
            <summary>
            Sets the specified symbol.
            </summary>
            <param name="symbol">The symbol to be included.</param>
            <returns><c>true</c> if the symbol was not yet set.</returns>
        </member>
        <member name="P:bsn.GoldParser.Grammar.SymbolSet.Item(bsn.GoldParser.Grammar.Symbol)">
            <summary>
            Includes or excludes the specified symbol from the set.
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Semantic.TerminalAttribute">
            <summary>
            This class is used to decorate constructors which accept exactly one string for the terminal value
            </summary>
        </member>
        <member name="T:bsn.GoldParser.Xml.ProcessResult">
            <summary>
            A structure to return the parsing result of a <see cref="T:bsn.GoldParser.Xml.GrammarXmlProcessor"/>
            </summary>
        </member>
        <member name="P:bsn.GoldParser.Xml.ProcessResult.Column">
            <summary>
            Gets the text column.
            </summary>
            <value>The text column.</value>
        </member>
        <member name="P:bsn.GoldParser.Xml.ProcessResult.Line">
            <summary>
            Gets the text line.
            </summary>
            <value>The text line.</value>
        </member>
        <member name="P:bsn.GoldParser.Xml.ProcessResult.Message">
            <summary>
            Gets the parser error message.
            </summary>
            <value>The parser message.</value>
        </member>
        <member name="P:bsn.GoldParser.Xml.ProcessResult.Success">
            <summary>
            Gets a value indicating whether the processing was terminated successfully.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:bsn.GoldParser.Xml.TokenXmlReader">
            <summary>
            Exposes the grammar tree previously parsed into a <see cref="T:bsn.GoldParser.Parser.Token"/> as XML tree, using
            elements with the same name as their symbol in the grammar and namespaces 
            (<c>urn:nonterminal</c> and <c>urn:terminal</c>) to represent all nodes.
            </summary>
            <remarks>
            <list type="bullet">
            <item>Only terminals have line information attached to them.</item>
            <item>All insignificant data, such as comments and whitespace, is not included in the 
            XML output.</item>
            <item>Symbol names are converted to XML compatible names by removing all invalid 
            characters from the name. If the resulting name is empty, a <c>_</c> (underscore) 
            character is used as name. Note that XML names may therefore be ambiguous compared to 
            the original names, the symbols <c>A B</c> and <c>AB</c> for instance would get the 
            same name (<c>AB</c>), as well as <c>==</c> and <c>.</c> etc. would (<c>_</c>).</item>
            </list>
            </remarks>
        </member>
        <member name="F:bsn.GoldParser.Xml.TokenXmlReader.NonterminalNS">
            <summary>
            The XML namespace used for nonterminal symbol token elements.
            </summary>
        </member>
        <member name="F:bsn.GoldParser.Xml.TokenXmlReader.TerminalNS">
            <summary>
            The XML namespace used for terminal symbol token elements.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.#ctor(System.Xml.XmlNameTable,bsn.GoldParser.Parser.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:bsn.GoldParser.Xml.TokenXmlReader"/> class.
            </summary>
            <param name="nametable">The nametable (optional, may be <c>null</c>) to be used.</param>
            <param name="root">The root (if <c>null</c>, no nodes are returned from the reader).</param>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.Close">
            <summary>
            Changes the <see cref="P:System.Xml.XmlReader.ReadState"/> to Closed.
            </summary>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.GetAttribute(System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"/> and <see cref="P:System.Xml.XmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
            <returns>
            The value of the specified attribute. This method does not move the reader.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.LookupNamespace(System.String)">
            <summary>
            Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>
            The namespace URI to which the prefix maps or null if no matching prefix is found.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"/> and <see cref="P:System.Xml.XmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.ReadAttributeValue">
            <summary>
            Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
            <c>true</c> if there are nodes to return. <c>false</c> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns <c>true</c> with a single node with a value of String.Empty.
            </returns>
        </member>
        <member name="M:bsn.GoldParser.Xml.TokenXmlReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
            <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity"/> returns <c>false</c>). </exception>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <value></value>
            <returns>The number of attributes on the current node.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.BaseURI">
            <summary>
            Gets the base URI of the current node, which is empty by default.
            </summary>
            <value></value>
            <returns>The base URI of the current node.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
            <value></value>
            <returns>The depth of the current node in the XML document.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            <value></value>
            <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.HasValue">
            <summary>
            Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value"/>.
            </summary>
            <value></value>
            <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
            <value></value>
            <returns>true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType"/> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <value></value>
            <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable"/> associated with this implementation.
            </summary>
            <value></value>
            <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
            <value></value>
            <returns>The namespace URI of the current node; otherwise an empty string.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Xml.XmlNodeType"/> values representing the type of the current node.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
            <value></value>
            <returns>The namespace prefix associated with the current node.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Xml.ReadState"/> values.</returns>
        </member>
        <member name="P:bsn.GoldParser.Xml.TokenXmlReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
            <value></value>
            <returns>The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType"/> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
        </member>
    </members>
</doc>
