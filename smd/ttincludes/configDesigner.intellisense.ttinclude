<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="System.Drawing" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Drawing.Design" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.ComponentModel" #>
<#+
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


/// <summary>
/// DomainEnumeration: TypeEnum
/// Description for devtm.Generator.ConfigDesigner.TypeEnum
/// </summary>
public enum TypeEnum
{
	/// <summary>
	/// Enum
	/// Description for devtm.Generator.ConfigDesigner.TypeEnum.Enum
	/// </summary>
	Enum,
	/// <summary>
	/// Validator
	/// Description for devtm.Generator.ConfigDesigner.TypeEnum.Validator
	/// </summary>
	Validator,
	/// <summary>
	/// TypeConverter
	/// Description for devtm.Generator.ConfigDesigner.TypeEnum.TypeConverter
	/// </summary>
	TypeConverter,
	/// <summary>
	/// TypeReturn
	/// Description for devtm.Generator.ConfigDesigner.TypeEnum.TypeReturn
	/// </summary>
	TypeReturn,
	/// <summary>
	/// NoFilter
	/// Description for devtm.Generator.ConfigDesigner.TypeEnum.NoFilter
	/// </summary>
	NoFilter,
}

/// <summary>
/// DomainEnumeration: EnumKind
/// Description for devtm.Generator.ConfigDesigner.EnumKind
/// </summary>
public enum EnumKind
{
	/// <summary>
	/// Normal
	/// Description for devtm.Generator.ConfigDesigner.EnumKind.Normal
	/// </summary>
	Normal = 0,
	/// <summary>
	/// External
	/// Description for devtm.Generator.ConfigDesigner.EnumKind.External
	/// </summary>
	External = 1,
}

/// <summary>
/// DomainEnumeration: EnumAccessibility
/// Description for devtm.Generator.ConfigDesigner.EnumAccessibility
/// </summary>
public enum EnumAccessibility
{
	/// <summary>
	/// Public
	/// Description for devtm.Generator.ConfigDesigner.EnumAccessibility.Public
	/// </summary>
	Public = 3,
	/// <summary>
	/// Internal
	/// Description for devtm.Generator.ConfigDesigner.EnumAccessibility.Internal
	/// </summary>
	Internal = 2,
	/// <summary>
	/// Protected
	/// Description for devtm.Generator.ConfigDesigner.EnumAccessibility.Protected
	/// </summary>
	Protected = 1,
	/// <summary>
	/// Private
	/// Description for devtm.Generator.ConfigDesigner.EnumAccessibility.Private
	/// </summary>
	Private = 0,
	/// <summary>
	/// ProtectedInternal
	/// Description for
	/// devtm.Generator.ConfigDesigner.EnumAccessibility.ProtectedInternal
	/// </summary>
	ProtectedInternal = 2,
}

/// <summary>
/// DomainEnumeration: CollectionType
/// Description for devtm.Generator.ConfigDesigner.CollectionType
/// </summary>
public enum CollectionType
{
	/// <summary>
	/// BasicMap
	/// Collections of this type contain elements that apply to the level at which they
	/// are specified, and to all child levels. A child level cannot modify the
	/// properties specified by a parent element of this type.
	/// </summary>
	BasicMap,
	/// <summary>
	/// AddRemoveClearMap
	/// The default type of ConfigurationElementCollection. Collections of this type
	/// contain elements that can be merged across a hierarchy of configuration files.
	/// At any particular level within such a hierarchy, add, remove, and clear
	/// directives are used to modify any inherited properties and specify new ones.
	/// </summary>
	AddRemoveClearMap,
	/// <summary>
	/// BasicMapAlternate
	/// Same as BasicMap, except that this type causes the
	/// ConfigurationElementCollection object to sort its contents such that inherited
	/// elements are listed last.
	/// </summary>
	BasicMapAlternate,
	/// <summary>
	/// AddRemoveClearMapAlternate
	/// Same as AddRemoveClearMap, except that this type causes the
	/// ConfigurationElementCollection object to sort its contents such that inherited
	/// elements are listed last.
	/// </summary>
	AddRemoveClearMapAlternate,
}

/// <summary>
/// DomainEnumeration: InheritanceModifiers
/// Description for devtm.Generator.ConfigDesigner.InheritanceModifiers
/// </summary>
public enum InheritanceModifiers
{
	/// <summary>
	/// None
	/// Description for devtm.Generator.ConfigDesigner.InheritanceModifiers.None
	/// </summary>
	None = 0,
	/// <summary>
	/// Abstract
	/// Description for devtm.Generator.ConfigDesigner.InheritanceModifiers.Abstract
	/// </summary>
	Abstract = 1,
	/// <summary>
	/// Sealed
	/// Description for devtm.Generator.ConfigDesigner.InheritanceModifiers.Sealed
	/// </summary>
	Sealed = 2,
}
/// <summary>
/// DomainClass ConfigurationModel
/// The root in which all other elements are embedded. Appears as a diagram.
/// </summary>
public partial class ConfigurationModel
{
	#region Namespace domain property code
	
	/// <summary>
	/// Gets or sets the value of Namespace domain property.
	/// Define the namespace root for all the generated code
	/// </summary>
	public global::System.String Namespace
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region CategoryCanBeEmpty domain property code
	
	/// <summary>
	/// Gets or sets the value of CategoryCanBeEmpty domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationModel.Category Can
	/// Be Empty
	/// </summary>
	public global::System.Boolean CategoryCanBeEmpty
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DescriptionCanBeEmpty domain property code
	
	/// <summary>
	/// Gets or sets the value of DescriptionCanBeEmpty domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationModel.Description
	/// Can Be Empty
	/// </summary>
	public global::System.Boolean DescriptionCanBeEmpty
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region XmlAttributeMustRespectCase domain property code
	
	/// <summary>
	/// Gets or sets the value of XmlAttributeMustRespectCase domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationModel.Xml Attribute
	/// Must Respect Case
	/// </summary>
	public global::System.Boolean XmlAttributeMustRespectCase
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region GenerateCode domain property code
	
	/// <summary>
	/// Gets or sets the value of GenerateCode domain property.
	/// Enable or disable the generation of the code
	/// </summary>
	public global::System.Boolean GenerateCode
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region GenerateXsd domain property code
	
	/// <summary>
	/// Gets or sets the value of GenerateXsd domain property.
	/// Enable or disable the generation of the xsd
	/// </summary>
	public global::System.Boolean GenerateXsd
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region GenerateSample domain property code
	
	/// <summary>
	/// Gets or sets the value of GenerateSample domain property.
	/// enable or disable the generation of the sample config with the default value;
	/// </summary>
	public global::System.Boolean GenerateSample
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region OutputFileName domain property code
	
	/// <summary>
	/// Gets or sets the value of OutputFileName domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationModel.Output File
	/// Name
	/// </summary>
	public global::System.String OutputFileName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ConfigurationGuid domain property code
	
	/// <summary>
	/// Gets or sets the value of ConfigurationGuid domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationModel.Configuration
	/// Guid
	/// </summary>
	public global::System.String ConfigurationGuid
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region GenerateT4 domain property code
	
	/// <summary>
	/// Gets or sets the value of GenerateT4 domain property.
	/// Generate t4 script
	/// </summary>
	public global::System.Boolean GenerateT4
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Elements opposite domain role accessor
	
	/// <summary>
	/// Gets a list of Elements.
	/// </summary>
	public virtual List<ConfigurationElement> Elements
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region Usings opposite domain role accessor
	
	/// <summary>
	/// Gets a list of Usings.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationModelHasUsings.ConfigurationModel
	/// </summary>
	public virtual List<UsingNamespace> Usings
	{
		get
		{
			return null;
		}
	}
	#endregion
}
/// <summary>
/// DomainClass ConfigurationElement
/// System.Configuration.ConfigurationElement
/// </summary>
public partial class ConfigurationElement
{
	#region Name domain property code
	
	/// <summary>
	/// Gets or sets the value of Name domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationElement.Name
	/// </summary>
	public global::System.String Name
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Namespace domain property code
	
	/// <summary>
	/// Gets or sets the value of Namespace domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationElement.Namespace
	/// </summary>
	public global::System.String Namespace
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Description domain property code
	
	/// <summary>
	/// Gets or sets the value of Description domain property.
	/// Description for devtm.Generator.ConfigDesigner.ConfigurationElement.Description
	/// </summary>
	public global::System.String Description
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region AccessModifier domain property code
	
	/// <summary>
	/// Gets or sets the value of AccessModifier domain property.
	/// Determines what the access modifier for the generated class is.
	/// </summary>
	public EnumAccessibility AccessModifier
	{
		get
		{
			return default(EnumAccessibility);
		}
		set
		{		
		}
	}
	
	#endregion
	#region InheritanceModifier domain property code
	
	/// <summary>
	/// Gets or sets the value of InheritanceModifier domain property.
	/// Determines if the inheritance modifier of the generated class is none, abstract
	/// or sealed
	/// </summary>
	public InheritanceModifiers InheritanceModifier
	{
		get
		{
			return default(InheritanceModifiers);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DeclarationIsRequired domain property code
	
	/// <summary>
	/// Gets or sets the value of DeclarationIsRequired domain property.
	/// Define the element must be present in the configuration section
	/// </summary>
	public global::System.Boolean DeclarationIsRequired
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ConfigurationModel opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationModel.
	/// </summary>
	public virtual ConfigurationModel ConfigurationModel
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
	#region Targets opposite domain role accessor
	
	/// <summary>
	/// Gets a list of Targets.
	/// Description for devtm.Generator.Configuration.ExampleRelationship.Target
	/// </summary>
	public virtual List<ConfigurationElement> Targets
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region Sources opposite domain role accessor
	
	/// <summary>
	/// Gets a list of Sources.
	/// Description for devtm.Generator.Configuration.ExampleRelationship.Source
	/// </summary>
	public virtual List<ConfigurationElement> Sources
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region AttributeProperties opposite domain role accessor
	
	/// <summary>
	/// Gets a list of AttributeProperties.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementHasAttribute.ConfigurationElement
	/// </summary>
	public virtual List<AttributeProperty> AttributeProperties
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region RefProperties opposite domain role accessor
	
	/// <summary>
	/// Gets a list of RefProperties.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementHasRefProperties.ConfigurationElement
	/// </summary>
	public virtual List<RefProperty> RefProperties
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region PropertiesRef opposite domain role accessor
	
	/// <summary>
	/// Gets a list of PropertiesRef.
	/// Description for devtm.Generator.ConfigDesigner.RefPropertyReferencesType.Type
	/// </summary>
	public virtual List<RefProperty> PropertiesRef
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region ItemFromCollection opposite domain role accessor
	/// <summary>
	/// Gets or sets ItemFromCollection.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementCollectionReferencesTypeItem.TypeItem
	/// </summary>
	public virtual ConfigurationElementCollection ItemFromCollection
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
	#region Usings opposite domain role accessor
	
	/// <summary>
	/// Gets a list of Usings.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementHasUsings.ConfigurationElement
	/// </summary>
	public virtual List<UsingNamespace> Usings
	{
		get
		{
			return null;
		}
	}
	#endregion
}
/// <summary>
/// DomainClass AttributeProperty
/// Description for devtm.Generator.ConfigDesigner.AttributeProperty
/// </summary>
public partial class AttributeProperty
{
	#region PropertyName domain property code
	
	/// <summary>
	/// Gets or sets the value of PropertyName domain property.
	/// Define the name of the property in the class
	/// </summary>
	public global::System.String PropertyName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region XmlNameAttribute domain property code
	
	/// <summary>
	/// Gets or sets the value of XmlNameAttribute domain property.
	/// Define the name of the node in the xml tree.
	/// </summary>
	public global::System.String XmlNameAttribute
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Description domain property code
	
	/// <summary>
	/// Gets or sets the value of Description domain property.
	/// Description for comment code and the Description Attribute
	/// </summary>
	public global::System.String Description
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DisplayName domain property code
	
	/// <summary>
	/// Gets or sets the value of DisplayName domain property.
	/// Display name for comment code and the DisplayName Attribute
	/// </summary>
	public global::System.String DisplayName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Required domain property code
	
	/// <summary>
	/// Gets or sets the value of Required domain property.
	/// define if the attribute porperty is required, if the value is true you must
	/// define the default value.
	/// </summary>
	public global::System.Boolean Required
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Type domain property code
	
	/// <summary>
	/// Gets or sets the value of Type domain property.
	/// define the return type.
	/// </summary>
	public global::System.String Type
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DefaultValue domain property code
	
	/// <summary>
	/// Gets or sets the value of DefaultValue domain property.
	/// Define the default value if not define
	/// </summary>
	public global::System.String DefaultValue
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Category domain property code
	
	/// <summary>
	/// Gets or sets the value of Category domain property.
	/// Category for the Category Attribute.
	/// </summary>
	public global::System.String Category
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region TypeConverter domain property code
	
	/// <summary>
	/// Gets or sets the value of TypeConverter domain property.
	/// Define a TypeConverter for convert the value
	/// </summary>
	public global::System.String TypeConverter
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region IsPropertyNameOfClass domain property code
	
	/// <summary>
	/// Gets or sets the value of IsPropertyNameOfClass domain property.
	/// Define the key
	/// </summary>
	public global::System.Boolean IsPropertyNameOfClass
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Kind domain property code
	
	/// <summary>
	/// Gets or sets the value of Kind domain property.
	/// Define if the property must be generated.
	/// </summary>
	public EnumKind Kind
	{
		get
		{
			return default(EnumKind);
		}
		set
		{		
		}
	}
	
	#endregion
	#region GetterAccessModifier domain property code
	
	/// <summary>
	/// Gets or sets the value of GetterAccessModifier domain property.
	/// Define the access for the getter
	/// </summary>
	public EnumAccessibility GetterAccessModifier
	{
		get
		{
			return default(EnumAccessibility);
		}
		set
		{		
		}
	}
	
	#endregion
	#region SetterAccessModifier domain property code
	
	/// <summary>
	/// Gets or sets the value of SetterAccessModifier domain property.
	/// Define the access for the setter
	/// </summary>
	public EnumAccessibility SetterAccessModifier
	{
		get
		{
			return default(EnumAccessibility);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ReadOnly domain property code
	
	/// <summary>
	/// Gets or sets the value of ReadOnly domain property.
	/// Define if must Generate a Setter for this property
	/// </summary>
	public global::System.Boolean ReadOnly
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Validator domain property code
	
	/// <summary>
	/// Gets or sets the value of Validator domain property.
	/// define the return type.
	/// </summary>
	public global::System.String Validator
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DefaultValueIsString domain property code
	
	/// <summary>
	/// Gets or sets the value of DefaultValueIsString domain property.
	/// The default value is a string
	/// </summary>
	public global::System.Boolean DefaultValueIsString
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region IsEnum domain property code
	
	/// <summary>
	/// Gets or sets the value of IsEnum domain property.
	/// Description for devtm.Generator.ConfigDesigner.AttributeProperty.Is Enum
	/// </summary>
	public global::System.Boolean IsEnum
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region EnumValues domain property code
	
	/// <summary>
	/// Gets or sets the value of EnumValues domain property.
	/// Description for devtm.Generator.ConfigDesigner.AttributeProperty.Enum Values
	/// </summary>
	public global::System.Collections.Generic.List<System.String> EnumValues
	{
		get
		{
			return default(global::System.Collections.Generic.List<System.String>);
		}
		set
		{		
		}
	}
	
	#endregion
	#region AuthorizeNoDefaultValue domain property code
	
	/// <summary>
	/// Gets or sets the value of AuthorizeNoDefaultValue domain property.
	/// Authorize No Default Value with the required value.
	/// </summary>
	public global::System.Boolean AuthorizeNoDefaultValue
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Designer domain property code
	
	/// <summary>
	/// Gets or sets the value of Designer domain property.
	/// Define a design template for the graphical designer
	/// </summary>
	public global::System.String Designer
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DesignerParameter domain property code
	
	/// <summary>
	/// Gets or sets the value of DesignerParameter domain property.
	/// Define a parameter for the graphical designer template
	/// </summary>
	public global::System.String DesignerParameter
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ConfigurationElement opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationElement.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementHasAttribute.AttributeProperty
	/// </summary>
	public virtual ConfigurationElement ConfigurationElement
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
}
/// <summary>
/// DomainClass ConfigurationElementCollection
/// Description for devtm.Generator.ConfigDesigner.ConfigurationElementCollection
/// </summary>
public partial class ConfigurationElementCollection
{
	#region CollectionType domain property code
	
	/// <summary>
	/// Gets or sets the value of CollectionType domain property.
	/// define the type of the items for the collection
	/// </summary>
	public CollectionType CollectionType
	{
		get
		{
			return default(CollectionType);
		}
		set
		{		
		}
	}
	
	#endregion
	#region AddItemName domain property code
	
	/// <summary>
	/// Gets or sets the value of AddItemName domain property.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementCollection.Add Item Name
	/// </summary>
	public global::System.String AddItemName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ClearItemsName domain property code
	
	/// <summary>
	/// Gets or sets the value of ClearItemsName domain property.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementCollection.Clear Items Name
	/// </summary>
	public global::System.String ClearItemsName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region RemoveItemName domain property code
	
	/// <summary>
	/// Gets or sets the value of RemoveItemName domain property.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementCollection.Remove Item Name
	/// </summary>
	public global::System.String RemoveItemName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region TypeItem opposite domain role accessor
	/// <summary>
	/// Gets or sets TypeItem.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementCollectionReferencesTypeItem.ConfigurationElementCollection
	/// </summary>
	public virtual ConfigurationElement TypeItem
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
}
/// <summary>
/// DomainClass ConfigurationSection
/// Description for devtm.Generator.ConfigDesigner.ConfigurationSection
/// </summary>
public partial class ConfigurationSection
{
	#region DefaultName domain property code
	
	/// <summary>
	/// Gets or sets the value of DefaultName domain property.
	/// Define the default name for the creation in the editor
	/// </summary>
	public global::System.String DefaultName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region SectionProperties opposite domain role accessor
	
	/// <summary>
	/// Gets a list of SectionProperties.
	/// Description for
	/// devtm.Generator.ConfigDesigner.SectionPropertyReferencesType.Type
	/// </summary>
	public virtual List<SectionProperty> SectionProperties
	{
		get
		{
			return null;
		}
	}
	#endregion
}
/// <summary>
/// DomainClass ConfigurationSectionGroup
/// Description for devtm.Generator.ConfigDesigner.ConfigurationSectionGroup
/// </summary>
public partial class ConfigurationSectionGroup
{
	#region DefaultName domain property code
	
	/// <summary>
	/// Gets or sets the value of DefaultName domain property.
	/// Define the default name for the creation in the editor
	/// </summary>
	public global::System.String DefaultName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region GroupProperties opposite domain role accessor
	
	/// <summary>
	/// Gets a list of GroupProperties.
	/// Description for devtm.Generator.ConfigDesigner.GroupPropertyReferencesType.Type
	/// </summary>
	public virtual List<GroupProperty> GroupProperties
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region SectionProperties opposite domain role accessor
	
	/// <summary>
	/// Gets a list of SectionProperties.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationSectionGroupHasSectionProperties.ConfigurationSectionGroup
	/// </summary>
	public virtual List<SectionProperty> SectionProperties
	{
		get
		{
			return null;
		}
	}
	#endregion
	#region GroupPropertiesType opposite domain role accessor
	
	/// <summary>
	/// Gets a list of GroupPropertiesType.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationSectionGroupHasGroupPropertiesType.ConfigurationSectionGroup
	/// </summary>
	public virtual List<GroupProperty> GroupPropertiesType
	{
		get
		{
			return null;
		}
	}
	#endregion
}
/// <summary>
/// DomainClass RefProperty
/// Description for devtm.Generator.ConfigDesigner.RefProperty
/// </summary>
public partial class RefProperty
{
	#region PropertyName domain property code
	
	/// <summary>
	/// Gets or sets the value of PropertyName domain property.
	/// Define the name of the property in the class
	/// </summary>
	public global::System.String PropertyName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region XmlNameAttribute domain property code
	
	/// <summary>
	/// Gets or sets the value of XmlNameAttribute domain property.
	/// Define the name of the node in the xml tree.
	/// </summary>
	public global::System.String XmlNameAttribute
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Description domain property code
	
	/// <summary>
	/// Gets or sets the value of Description domain property.
	/// Description for comment code and the Description Attribute
	/// </summary>
	public global::System.String Description
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DisplayName domain property code
	
	/// <summary>
	/// Gets or sets the value of DisplayName domain property.
	/// Display name for comment code and the DisplayName Attribute
	/// </summary>
	public global::System.String DisplayName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Category domain property code
	
	/// <summary>
	/// Gets or sets the value of Category domain property.
	/// Category for the Category Attribute.
	/// </summary>
	public global::System.String Category
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Required domain property code
	
	/// <summary>
	/// Gets or sets the value of Required domain property.
	/// Description for devtm.Generator.ConfigDesigner.RefProperty.Required
	/// </summary>
	public global::System.Boolean Required
	{
		get
		{
			return default(global::System.Boolean);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ConfigurationElement opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationElement.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementHasRefProperties.RefProperty
	/// </summary>
	public virtual ConfigurationElement ConfigurationElement
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
	#region Type opposite domain role accessor
	/// <summary>
	/// Gets or sets Type.
	/// Description for
	/// devtm.Generator.ConfigDesigner.RefPropertyReferencesType.RefProperty
	/// </summary>
	public virtual ConfigurationElement Type
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
}
/// <summary>
/// DomainClass SectionProperty
/// Description for devtm.Generator.ConfigDesigner.SectionProperty
/// </summary>
public partial class SectionProperty
{
	#region PropertyName domain property code
	
	/// <summary>
	/// Gets or sets the value of PropertyName domain property.
	/// Define the name of the property in the class
	/// </summary>
	public global::System.String PropertyName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region XmlNameAttribute domain property code
	
	/// <summary>
	/// Gets or sets the value of XmlNameAttribute domain property.
	/// Define the name of the node in the xml tree.
	/// </summary>
	public global::System.String XmlNameAttribute
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Description domain property code
	
	/// <summary>
	/// Gets or sets the value of Description domain property.
	/// Description for comment code and the Description Attribute
	/// </summary>
	public global::System.String Description
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DisplayName domain property code
	
	/// <summary>
	/// Gets or sets the value of DisplayName domain property.
	/// Display name for comment code and the DisplayName Attribute
	/// </summary>
	public global::System.String DisplayName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Category domain property code
	
	/// <summary>
	/// Gets or sets the value of Category domain property.
	/// Category for the Category Attribute.
	/// </summary>
	public global::System.String Category
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Type opposite domain role accessor
	/// <summary>
	/// Gets or sets Type.
	/// Description for
	/// devtm.Generator.ConfigDesigner.SectionPropertyReferencesType.SectionProperty
	/// </summary>
	public virtual ConfigurationSection Type
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
	#region ConfigurationSectionGroup opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationSectionGroup.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationSectionGroupHasSectionProperties.SectionProperty
	/// </summary>
	public virtual ConfigurationSectionGroup ConfigurationSectionGroup
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
}
/// <summary>
/// DomainClass GroupProperty
/// Description for devtm.Generator.ConfigDesigner.GroupProperty
/// </summary>
public partial class GroupProperty
{
	#region PropertyName domain property code
	
	/// <summary>
	/// Gets or sets the value of PropertyName domain property.
	/// Define the name of the property in the class
	/// </summary>
	public global::System.String PropertyName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region XmlNameAttribute domain property code
	
	/// <summary>
	/// Gets or sets the value of XmlNameAttribute domain property.
	/// Define the name of the node in the xml tree.
	/// </summary>
	public global::System.String XmlNameAttribute
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Description domain property code
	
	/// <summary>
	/// Gets or sets the value of Description domain property.
	/// Description for comment code and the Description Attribute
	/// </summary>
	public global::System.String Description
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region DisplayName domain property code
	
	/// <summary>
	/// Gets or sets the value of DisplayName domain property.
	/// Display name for comment code and the DisplayName Attribute
	/// </summary>
	public global::System.String DisplayName
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Category domain property code
	
	/// <summary>
	/// Gets or sets the value of Category domain property.
	/// Category for the Category Attribute.
	/// </summary>
	public global::System.String Category
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region Type opposite domain role accessor
	/// <summary>
	/// Gets or sets Type.
	/// Description for
	/// devtm.Generator.ConfigDesigner.GroupPropertyReferencesType.GroupProperty
	/// </summary>
	public virtual ConfigurationSectionGroup Type
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
	#region ConfigurationSectionGroup opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationSectionGroup.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationSectionGroupHasGroupPropertiesType.GroupProperty
	/// </summary>
	public virtual ConfigurationSectionGroup ConfigurationSectionGroup
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
}
/// <summary>
/// DomainClass UsingNamespace
/// Description for devtm.Generator.ConfigDesigner.UsingNamespace
/// </summary>
public partial class UsingNamespace
{
	#region Fullname domain property code
	
	/// <summary>
	/// Gets or sets the value of Fullname domain property.
	/// Description for devtm.Generator.ConfigDesigner.UsingNamespace.Fullname
	/// </summary>
	public global::System.String Fullname
	{
		get
		{
			return default(global::System.String);
		}
		set
		{		
		}
	}
	
	#endregion
	#region ConfigurationElement opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationElement.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationElementHasUsings.Usings
	/// </summary>
	public virtual ConfigurationElement ConfigurationElement
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
	#region ConfigurationModel opposite domain role accessor
	/// <summary>
	/// Gets or sets ConfigurationModel.
	/// Description for
	/// devtm.Generator.ConfigDesigner.ConfigurationModelHasUsings.Usings
	/// </summary>
	public virtual ConfigurationModel ConfigurationModel
	{
		get
		{
			return null;
		}
		set
		{
		}
	}
	#endregion
}
#>

